{
	"info": {
		"_postman_id": "b4bd893e-932d-49ce-a17b-810af651135d",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Task_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// Метод GET.\r",
							"// {{url}}/first\r",
							"\r",
							"// 2. Статус код 200.\r",
							"\r",
							"pm.test('Status code is 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test('Body is correct',() => {\r",
							"    let body = pm.response.text();\r",
							"    pm.expect(body).to.eql('This is the first responce from server!')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// Метод POST\r",
							"// {{url}}/user_info_3\r",
							"\r",
							"// 2. Статус код 200.\r",
							"\r",
							"pm.test('Status code is 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками).\r",
							"\r",
							"pm.test('Check name', () => {\r",
							"    pm.expect(responseJson.name).to.eql('Igor');\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками).\r",
							"\r",
							"pm.test('Check age', () => {\r",
							"    pm.expect(responseJson.age).to.eql('39');\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками).\r",
							"\r",
							"pm.test('Check salary', () => {\r",
							"    pm.expect(responseJson.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"const reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request).\r",
							"\r",
							"pm.test('Check name request', () => {\r",
							"      pm.expect(reqData.name).to.eql(responseJson.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request).\r",
							"\r",
							"pm.test('Check age request', () => {\r",
							"    pm.expect(reqData.age).to.eql(responseJson.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request).\r",
							"\r",
							"const salaryAsNumber = parseInt(reqData.salary);\r",
							"\r",
							"pm.test('Check salary request', () => {\r",
							"    pm.expect(salaryAsNumber).to.eql(responseJson.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(responseJson.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request).\r",
							"\r",
							"pm.test('Check salary', () => {\r",
							"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(4*salaryAsNumber);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Igor",
							"type": "text"
						},
						{
							"key": "age",
							"value": "39",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// Метод GET.\r",
							"// {{url}}/object_info_3\r",
							"\r",
							"// 2. Статус код 200.\r",
							"\r",
							"pm.test('Status code is 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"const reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request).\r",
							"\r",
							"pm.test('Check name', () => {\r",
							"    pm.expect(responseJson.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request).\r",
							"\r",
							"pm.test('Check age', () => {\r",
							"    pm.expect(responseJson.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request).\r",
							"\r",
							"const salaryAsNumber = parseInt(reqData.salary);\r",
							"\r",
							"pm.test('Check salary', () => {\r",
							"    pm.expect(responseJson.salary).to.eql(salaryAsNumber);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(responseJson.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметр name.\r",
							"\r",
							"pm.test('Check that the dog has name', () => {\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметр age.\r",
							"\r",
							"pm.test('Check that the dog has age', () => {\r",
							"    pm.expect(responseJson.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Check that the dog's name is Luky\", () => {\r",
							"    pm.expect(responseJson.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Check dog's age\", () => {\r",
							"    pm.expect(responseJson.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "",
							"type": "text"
						},
						{
							"key": "age",
							"value": "",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Ivan&age=42&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "42"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// Метод GET.\r",
							"// {{url}}/object_info_4\r",
							"\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test('Status code is 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request).\r",
							"\r",
							"pm.test('Check name', () => {\r",
							"    pm.expect(responseJson.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request).\r",
							"\r",
							"const ageAsNumber = parseInt(reqData.age);\r",
							"\r",
							"pm.test('Check age', () => {\r",
							"    pm.expect(responseJson.age).to.eql(ageAsNumber);\r",
							"    });\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(reqData.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(responseJson.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(responseJson.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"\r",
							"console.log(responseJson.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary из response.\r",
							"\r",
							"console.log(responseJson.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request).\r",
							"\r",
							"const salaryAsNumber = parseInt(reqData.salary); \r",
							"\r",
							"pm.test('Check o parameter', () => {\r",
							"    pm.expect(responseJson.salary[0]).to.eql(salaryAsNumber);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request).\r",
							"\r",
							"pm.test('Check 1 parameter', () => {\r",
							"    const salary2x = salaryAsNumber*2;\r",
							"    pm.expect(responseJson.salary[1]).to.eql(salary2x.toString());\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request).\r",
							"\r",
							"pm.test('Check 2 parameter', () => {\r",
							"    const salary3x = salaryAsNumber*3;\r",
							"    pm.expect(responseJson.salary[2]).to.eql(salary3x.toString());\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name.\r",
							"\r",
							"pm.environment.set('name', 'Kate');\r",
							"\r",
							"// 16. Создать в окружении переменную age.\r",
							"\r",
							"pm.environment.set('age', '35');\r",
							"\r",
							"// 17. Создать в окружении переменную salary.\r",
							"\r",
							"pm.environment.set('salary', '1000');\r",
							"\r",
							"// 18. Передать в окружение переменную name.\r",
							"\r",
							"pm.environment.set('name', reqData.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age.\r",
							"\r",
							"pm.environment.set('age', reqData.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary.\r",
							"\r",
							"pm.environment.set('salary', reqData.salary);\r",
							"\r",
							"// 21. Написать цикл, который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (let salaryItem of responseJson.salary) {\r",
							"    console.log(salaryItem);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Maria&age=36&salary=1200&",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Maria"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "1200"
						},
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request.\r",
							"// 2. Вставить параметр age из окружения в age.\r",
							"// 3. Вставить параметр name из окружения в name.\r",
							"// 4. Отправить запрос.\r",
							"// Метод POST.\r",
							"// {{url}}/user_info_2\r",
							"\r",
							"// 5. Статус код 200.\r",
							"\r",
							"pm.test('Status code is 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"const reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary.\r",
							"\r",
							"pm.test('Check start_qa_salary parameter', () => {\r",
							"    pm.expect(responseJson).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months.\r",
							"\r",
							"pm.test('Check qa_salary_after_6_months parameter', () => {\r",
							"   pm.expect(responseJson).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months.\r",
							"\r",
							"pm.test('Check qa_salary_after_12_months parameter', () => {\r",
							"   pm.expect(responseJson).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year.\r",
							"\r",
							"pm.test('Check qa_salary_after_1.5_year parameter', () => {\r",
							"   pm.expect(responseJson).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years.\r",
							"\r",
							"pm.test('Check qa_salary_after_3.5_year parameter', () => {\r",
							"   pm.expect(responseJson).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person.\r",
							"\r",
							"pm.test('Check person parameter', () => {\r",
							"   pm.expect(responseJson).to.have.property('person');\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request).\r",
							"\r",
							"pm.test('Check start_qa_salary', () => {\r",
							"    const salaryAsNumber = parseInt(reqData.salary);\r",
							"    pm.expect(responseJson.start_qa_salary).to.eql(salaryAsNumber);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request).\r",
							"\r",
							"pm.test('Check qa_salary_after_6_months', () => {\r",
							"    const salaryAsNumber = parseInt(reqData.salary);\r",
							"    pm.expect(responseJson.qa_salary_after_6_months).to.eql(salaryAsNumber*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request).\r",
							"\r",
							"pm.test('Check qa_salary_after_12_months', () => {\r",
							"    const salaryAsNumber = parseInt(reqData.salary);\r",
							"    pm.expect(responseJson.qa_salary_after_12_months).to.eql(salaryAsNumber*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request).\r",
							"\r",
							"pm.test('Check qa_salary_after_1.5_year', () => {\r",
							"    const salaryAsNumber = parseInt(reqData.salary);\r",
							"    pm.expect(responseJson['qa_salary_after_1.5_year']).to.eql(salaryAsNumber*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request).\r",
							"\r",
							"pm.test('Check qa_salary_after_3.5_years', () => {\r",
							"    const salaryAsNumber = parseInt(reqData.salary);\r",
							"    pm.expect(responseJson['qa_salary_after_3.5_years']).to.eql(salaryAsNumber*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request).\r",
							"\r",
							"pm.test('Check u_name', () => {\r",
							"    const salaryAsNumber = parseInt(reqData.salary);\r",
							"    pm.expect(responseJson.person.u_name[1]).to.eql(salaryAsNumber);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request).\r",
							"\r",
							"pm.test('Check u_age', () => {\r",
							"    const ageAsNumber = parseInt(reqData.age);\r",
							"    pm.expect(responseJson.person.u_age).to.eql(ageAsNumber);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"\r",
							"pm.test('Check u_salary_5_years', () => {\r",
							"    pm.expect(responseJson.person.u_salary_5_years).to.eql(reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. *** Написать цикл, который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (let personItem of responseJson.person.u_name) {\r",
							"    console.log(personItem);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}